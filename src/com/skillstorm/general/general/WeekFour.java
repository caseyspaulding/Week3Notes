package com.skillstorm.general.general;

import com.skillstorm.beans.Motorcycle;

import java.util.Random;

public class WeekFour {

        public static void main(String[] args) {
            // got to start with objects in memory
            // objects are instances of classes

            // You have the Math Class
            // and the Random Class. The Random class is preferred.

            for (int i = 0; i < 10; i++) {
                System.out.println(Math.random());
            }
            // Math.random() returns a double between 0.0 and 1.0

            // if you want larger values, you can multiply it by a number

            System.out.println("********** Math.random with range **********");
            for (int i = 0; i < 10; i++) {
                // Math.random() * (high - low) + low
                System.out.println(Math.random() * (120 - 30 ) + 30);
            }

            // the second, and more preferred way to get random value is
            // to use the Random class.
            System.out.println("********** Random next int **********");
            Random rand = new Random();

            for (int i = 0; i < 10; i++) {
                System.out.println(rand.nextInt());

            }

            System.out.println("********** Random next int with range **********");
            for (int i = 0; i < 10; i++) {
                // rand.nextInt(high - low) + low
                // not inclusive of the high value for ints

                System.out.println(rand.nextInt(120 - 110) + 110);
            }

            System.out.println("********** Random next double with range **********");
            for (int i = 0; i < 10; i++) {
                // rand.nextInt(high - low) + low
                // not inclusive of the high value for ints

                System.out.println(rand.nextDouble() * (120 - 110) + 110);
            }

            // the random values are not truly random, they are psuedo random
            // they are generated by a formula, and the formula is based on a seed value
            // the seed value is the current time in milliseconds
            // Random rand = new Random(1);
            // in the above, 1 is the seed

            // ----- Exceptions ----- //
            // some unforseen thing happened, something Java does not know how to
            // handle, These happen at runtime / compile time.
            // you can recover from exceptions, or you can let them crash your program.
            // Exceptions you can recover from
            // Errors you cannot recover from.

            // Exceptions give you a stack trace,
            // this lets you retrace your steps through the call stack

            int var = 0;
            int result = 5 / 10; // this is a compile time error

            int[] nums = {1, 2, 3};
            // nums[5] = 5; // this is a runtime error // -- ArrayIndexOutOfBoundsException

            //Sport bike = null;
            // bike.getMake(); // this is a runtime error // -- NullPointerException

            // the above 3 exceptions are part of the java.lang package --------////
            // the above are all unchecked exceptions, they are not checked at compile time.
            // the above are all examples of runtime exceptions
            // runtime ex



        }

        public static void failGracefully(){
            // when running your code you want to fail gracefully
            int var = 0;
            int result = 5 / var; // this is a runtime error // -- ArithmeticException

        }
}
